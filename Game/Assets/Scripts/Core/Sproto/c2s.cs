// Generated by sprotodump. DO NOT EDIT!
// source: E:/Github/BackUp/excel2sproto/Game/Assets/Res/Configs/Sproto/c2s.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace C2SSprotoType { 
	public class c2s {
	
		public class login {
		
			public class request : SprotoTypeBase {
				private static int max_field_count = 1;
				
				
				private string _token; // tag 0
				public string token {
					get { return _token; }
					set { base.has_field.set_field (0, true); _token = value; }
				}
				public bool HasToken {
					get { return base.has_field.has_field (0); }
				}

				public request () : base(max_field_count) {}

				public request (byte[] buffer) : base(max_field_count, buffer) {
					this.decode ();
				}

				protected override void decode () {
					int tag = -1;
					while (-1 != (tag = base.deserialize.read_tag ())) {
						switch (tag) {
						case 0:
							this.token = base.deserialize.read_string ();
							break;
						default:
							base.deserialize.read_unknow_data ();
							break;
						}
					}
				}

				public override int encode (SprotoStream stream) {
					base.serialize.open (stream);

					if (base.has_field.has_field (0)) {
						base.serialize.write_string (this.token, 0);
					}

					return base.serialize.close ();
				}
			}


			public class response : SprotoTypeBase {
				private static int max_field_count = 3;
				
				
				private Int64 _r; // tag 0
				public Int64 r {
					get { return _r; }
					set { base.has_field.set_field (0, true); _r = value; }
				}
				public bool HasR {
					get { return base.has_field.has_field (0); }
				}

				private Int64 _session; // tag 1
				public Int64 session {
					get { return _session; }
					set { base.has_field.set_field (1, true); _session = value; }
				}
				public bool HasSession {
					get { return base.has_field.has_field (1); }
				}

				private Int64 _userid; // tag 2
				public Int64 userid {
					get { return _userid; }
					set { base.has_field.set_field (2, true); _userid = value; }
				}
				public bool HasUserid {
					get { return base.has_field.has_field (2); }
				}

				public response () : base(max_field_count) {}

				public response (byte[] buffer) : base(max_field_count, buffer) {
					this.decode ();
				}

				protected override void decode () {
					int tag = -1;
					while (-1 != (tag = base.deserialize.read_tag ())) {
						switch (tag) {
						case 0:
							this.r = base.deserialize.read_integer ();
							break;
						case 1:
							this.session = base.deserialize.read_integer ();
							break;
						case 2:
							this.userid = base.deserialize.read_integer ();
							break;
						default:
							base.deserialize.read_unknow_data ();
							break;
						}
					}
				}

				public override int encode (SprotoStream stream) {
					base.serialize.open (stream);

					if (base.has_field.has_field (0)) {
						base.serialize.write_integer (this.r, 0);
					}

					if (base.has_field.has_field (1)) {
						base.serialize.write_integer (this.session, 1);
					}

					if (base.has_field.has_field (2)) {
						base.serialize.write_integer (this.userid, 2);
					}

					return base.serialize.close ();
				}
			}


		}


		public class package : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _type; // tag 0
			public Int64 type {
				get { return _type; }
				set { base.has_field.set_field (0, true); _type = value; }
			}
			public bool HasType {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _session; // tag 1
			public Int64 session {
				get { return _session; }
				set { base.has_field.set_field (1, true); _session = value; }
			}
			public bool HasSession {
				get { return base.has_field.has_field (1); }
			}

			public package () : base(max_field_count) {}

			public package (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.type = base.deserialize.read_integer ();
						break;
					case 1:
						this.session = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.type, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.session, 1);
				}

				return base.serialize.close ();
			}
		}


	}


}


public class C2SProtocol : ProtocolBase {
	public static  C2SProtocol Instance = new C2SProtocol();
	private C2SProtocol() {
		Protocol.SetProtocol<c2s.login> (c2s.login.Tag);
		Protocol.SetRequest<C2SSprotoType.c2s.login.request> (c2s.login.Tag);
		Protocol.SetResponse<C2SSprotoType.c2s.login.response> (c2s.login.Tag);

	}

	public class c2s {
		public class login {
			public const int Tag = 1;
		}

	}

}